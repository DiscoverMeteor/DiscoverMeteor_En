---
title: Animations
slug: animations
date: 0014/01/01
number: 14
points: 10
photoUrl: http://www.flickr.com/photos/ikewinski/8377615133/
photoAuthor: Mike Lewinski
contents: See what happens behind the scenes when Meteor swaps two DOM elements.|Learn how to animate the reordering of posts.|Learn how to animate the insertion of new posts.
paragraphs: 58
---

We now have real-time voting, scoring, and ranking. However, this leads to a jarring, erratic user experience as posts jump around on the homepage. We'll use animations to smooth this over.

### Meteor & the DOM

Before we can start the fun part (making things move around), we need to understand how Meteor interacts with the DOM (Document Object Model -- the collection of HTML elements that make up a page's contents).

The crucial point to keep in mind is that elements in the DOM cannot really be “moved”; however, they can be deleted and created (note that this is a limitation of the DOM itself, not of Meteor). So to give the illusion of elements A and B switching place, Meteor will actually delete element B and insert a brand new copy (B') before element A. 

This makes animation a little tricky, as we can't just animate B to move it to a new position, because B will be gone as soon as Meteor re-renders the page (which happens instantly thanks to reactivity). But don't worry, we'll find a way. 

### The Soviet Runner

The year was 1980, at the height of the Cold War. The Olympics were being held in Moscow, and the Soviets were determined to win the 100 meters dash at any cost. So a group of brilliant Soviet scientists equipped one of their athletes with a teleporter, and as soon as the gunshot was heard the runner was instantly moved to the finish line. 

Thankfully, race officials noticed the infraction immediately, and the athlete had no choice but to teleport back to the starting blocks, before being allowed to participate in the race by running like everybody else. 

My historical sources aren't that reliable, so you should take that story with a grain of salt. But do try and keep the "Soviet runner with a teleporter" analogy in mind as we go through this chapter.

### Breaking It Down

When Meteor receives an update and reactively modifies the DOM, our post will be instantly teleported to its final position, just like the soviet runner. But whether at the Olympics or in our app, we can't just have stuff teleporting around. So we’ll teleport the element back to the “starting blocks” and make it “run” (in other words, animate it) up to the finish line.

So to switch posts A and B (positioned in positions p1 and p2, respectively), we would go through the following steps:

1. Delete B
2. Create B' before A in the DOM
3. Teleport B' to p2
4. Teleport A to p1
5. Animate A to p2
6. Animate B' to p1

The following diagram explains these steps in more detail:

<%= diagram "animation_diagram", "Switching two posts", "pull-center" %>

Again, in steps 3 and 4 we're not *animating* A and B' to their positions but “teleporting” them instantly. Since this is instantaneous, it will give the illusion that B was never deleted, and properly position both elements to be animated back to their new position.

Thankfully, Meteor takes care of steps 1 & 2 for us, so we only need to worry about steps 3 through 6. 

Moreover, in steps 5 and 6 all we're doing is moving the elements to their proper spot. So the only part we really need to worry about is steps 3 and 4, i.e. sending the elements to the animation's starting point. 

### CSS Positioning

To animate the posts being reordered around the page, we'll have to venture into CSS territory. A quick review of CSS positioning might be in order. 

Elements on a page use **static** positioning by default. Statically positioned elements just fit within the flow of the page, and their coordinates on the screen cannot be changed or animated. 

**Relative** positioning on the other hand means that the element also fits in the flow of the page, but can be positioned *relative to its original position*. 

**Absolute** positioning goes one step further and lets you give  the element specific x/y coordinates relative to the **document** or **the first absolute or relative-positioned parent element**. 

We'll use relative positioning to animate our posts. We've already taken care of the CSS for you, but if you needed to do it yourself all you would do is add this code to your stylesheet:

~~~css
.post{
  position:relative;
  transition:all 300ms 0ms ease-in;
}
~~~
<%= caption "client/stylesheets/style.css" %>

This makes steps 5 and 6 quite easy: all we need to do is reset `top` to `0px` (its default value) and our posts will slide back to their "normal" position. 

So basically, our only challenge is figuring where to animate them *from* (steps 3 and 4) relative to their new position. In other words, how much to offset them. But that's not very hard either: the correct offset is simply a post's previous position minus its new one. 

<% note do %>

### Position:absolute

We could also use `position:absolute` with a relative parent to position our elements. But a big downside of absolutely positioned elements is that they're completely removed from the flow of the page, causing their parent container to collapse as if it were empty. 

This in turns means we'd need to artificially set the height of the container via JavaScript, instead of leaving the browser reflow elements naturally. Consequently, whenever possible it's best to stick with relative positioning. 

<% end %>

### Introducing `_uihooks`

Now that we understand the various factors at play in animating a list of items, we're ready to start implementing the animation. And for that, we'll use `_uihooks`. 

`_uihooks` is a relatively new, and as yet undocumented feature of Blaze. As its name indicates, it gives access to hooks that can be triggered whenever elements are inserted, removed, or animated. 

The full list of hooks is as follow:

- `insertElement`: called whenever a new element is inserted.
- `moveElement`: called when an element changes position.
- `removeElement`: called when an element is removed.

To see `_uihooks` in action, we'll first need to wrap our list of posts in a new `.wrapper` container element:

```html
<template name="postsList">
  <div class="posts">
    <div class="wrapper">
      {{#each posts}}
        {{> postItem}}
      {{/each}}
    </div>
    
    {{#if nextPath}}
      <a class="load-more" href="{{nextPath}}">Load more</a>
    {{else}}
      {{#unless ready}}
        {{> spinner}}
      {{/unless}}
    {{/if}}
  </div>
</template>
```
<%= caption "/client/templates/posts/post_list.html" %>
<%= highlight "3,7" %>

We'll then select that `.wrapper` div inside the template's `rendered` callback, and define a `moveElement` hook. 

```js
Template.postsList.rendered = function () {
  this.find('.wrapper')._uihooks = {
    moveElement: function (node, next) {
      // do nothing for now
    }
  }
}
```
<%= caption "/client/templates/posts/post_list.js" %>
<%= highlight "1~7" %>

The `moveElement` function we just defined will be called whenever an element's position changes *instead* of Blaze's default behavior. And since the function is empty, this means *nothing will happen*. 

Go ahead and try it: open up the “Best“ view and upvote a few posts: the ordering won't change until you force a rerender (either by reloading the page or switching routes).

We've ascertained that `_uihooks` works. Now let's make it animate!

### Animating Posts Reordering

The `moveElement` hook takes two arguments: `node` and `next`. 

- `node` is the element currently being moved to a new position in the DOM. 
- `next` is the element right *after* the new position that `node` is being moved to. 

Knowing this, we can work out the following animation process (feel free to refer back to the “Soviet Runner” example if you need to refresh your memory). When a new position change is detected, we'll:

1. Insert `node` before `next` (in other words, the default behavior that will happen if we don't specify any `moveElement` hook at all).
2. Move `node` back to its original position.
3. Nudge every element between `node` and `next` to make room for `node`.
4. Animate all elements back to their new default position.

We'll do all this through the magic of [jQuery](http://jquery.com), by far the best DOM manipulation library out there. jQuery itself is out of the scope of this book, but let's quickly go over the jQuery methods we'll use:

- [`$()`](http://api.jquery.com/jQuery/): wrap any DOM element with the jQuery method to make it a jQuery object.
- [`offset()`](http://api.jquery.com/offset/): retrieve the current position of an element relative to *the document*, and returns an object containing `top` and `left` properties.
- [`outerHeight()`](http://api.jquery.com/outerHeight/): get the “outer” height (including padding and optionally margin) of an element.
- [`nextUntil(selector)`](http://api.jquery.com/nextUntil/): get all elements after the target element up to (but not including) the element matched by `selector`.
- [`insertBefore(selector)`](http://api.jquery.com/insertBefore/): insert an element before the one matched by `selector`. 
- [`removeClass(class)`](http://api.jquery.com/removeClass/): remove the `class` CSS class, if present on the element.
- [`css(propertyName, propertyValue)`](http://api.jquery.com/css/): set the `propertyName` CSS property to `propertyValue`. 
- [`height()`](http://api.jquery.com/height/): get an element's height. 
- [`addClass(class)`](http://api.jquery.com/addClass/): add the `class` CSS class to an element.

```js
Template.postsList.rendered = function () {
  this.find('.wrapper')._uihooks = {
    moveElement: function (node, next) {
      var $node = $(node), $next = $(next);
      var oldTop = $node.offset().top;
      var height = $node.outerHeight(true);
      
      // find all the elements between next and node
      var $inBetween = $next.nextUntil(node);
      if ($inBetween.length === 0)
        $inBetween = $node.nextUntil(next);
      
      // now put node in place
      $node.insertBefore(next);
      
      // measure new top
      var newTop = $node.offset().top;
      
      // move node *back* to where it was before
      $node
        .removeClass('animate')
        .css('top', oldTop - newTop);
      
      // push every other element down (or up) to put them back
      $inBetween.css('top', oldTop < newTop ? height : -1 * height)
      $inBetween
        .removeClass('animate')
        .css('top', oldTop < newTop ? height : -1 * height)
        
      
      // force a redraw
      $node.height();
      
      // reset everything to 0, animated
      $node.addClass('animate').css('top', 0);
      $inBetween.addClass('animate').css('top', 0);
    }
  }
}
```
<%= caption "/client/templates/posts/post_list.js" %>

A few notes:

- We calculate `$node`'s height so we know by how much to offset the `$inBetween` elements. We use `outerHeight(true)` so that margin and padding are factored in the calculation.
- We don't know if `next` comes after or before `node` when going down the DOM. So we check both configurations when defining `$inBetween`. 
- In order to switch between “teleporting” and “animating” elements, we're simply toggling the `animate` CSS class on and off (the actual animation being defined in the app's CSS code). 
- We call `$node.height()` because XXXX.
- Since we're using relative positioning, we can always reset any element's `top` property back to 0 to bring it back to where it's supposed to be. 

Let's give it a spin. Go back to the “Best” view and start upvoting: you should now see our posts glide up and down with ballet-like grace!

<%= commit "14-1", "Added post reordering animation." %>

### Insertions & Removals

Now that we've taken care of the tricky reordering sequence, animating posts being inserted and removed will be a piece of cake!

First, we'll fade in new posts (note that for simplicity's sake, we're using JavaScript animations this time):

```js
Template.postsList.rendered = function () {
  this.find('.wrapper')._uihooks = {
    insertElement: function (node, next) {
      $(node)
        .hide()
        .insertBefore(next)
        .fadeIn();
    },
    moveElement: function (node, next) {
      //...
    }
  }
}
```
<%= caption "/client/templates/posts/post_list.js" %>
<%= highlight "3~7" %>

And then we'll fade out deleted posts:

```js
Template.postsList.rendered = function () {
  this.find('.wrapper')._uihooks = {
    insertElement: function (node, next) {
      $(node)
        .hide()
        .insertBefore(next)
        .fadeIn();
    },
    moveElement: function (node, next) {
      //...
    },
    removeElement: function(node) {
      $(node).fadeOut(function() {
        $(this).remove();
      });
    }
  }
}
```
<%= caption "/client/templates/posts/post_list.js" %>
<%= highlight "12~16" %>

All done! Try inserting and deleting a few posts to see the effect in action.

<%= commit "14-2", "Fade items in when they are drawn." %>

### Page Transitions

So far we've animated elements *within* a page. But what if we wanted to add transitions *in-between* pages?

This presents a challenge: animating a transition implies having both the page we're leaving and the page we're going to present on the screen *at the same time*. Iron Router doesn't include any mechanism to handle this scenario. But thankfully, the [momentum](https://github.com/percolatestudio/meteor-momentum) and [momentum-iron-router](https://github.com/percolatestudio/momentum-iron-router) packages do just that. 

Let's add both with:

```
meteor add percolate:momentum
meteor add percolate:momentum-iron-router
```

// TODO: talk about wrapping?

We're now ready to animate the transitions. Open `layout.html`, and wrap the `{{>yield}}` template helper with Momentum's own helper:

```html
<template name="layout">
  <div class="container">
    {{> header}}
    {{> errors}}
    <div id="main" class="row-fluid">
      {{#momentum plugin='iron-router' options=transition}}
        {{> yield}}
      {{/momentum}}
    </div>
  </div>
</template>
```
<%= caption "/client/templates/application/layout.html" %>
<%= highlight "6~8" %>

Finally, let's define the `transition` argument used by the helper:

```js
Template.layout.transition = function () {
  return function(from, to, element) {
    return 'fade'
  }
}
```

It will return a function that itself returns another function, that then returns the `fade` keyword. This is obviously a little involved, but this pattern is useful for more complex transitions (such as iOS style left-to-right translations for example).

<%= commit "14-3", "Transition between pages by fading." %>

### Loading Woes

We're still not quite out of the woods though. As you'll notice if you try out our transitions, there's a weird glitchy effect where some of our “from” pages (specifically, any post list page) disappear as soon as we initiate the route change, without being faded out. 

// TODO: do we still need this?

// TODO: do we still need the following note?

<% note do %>

### CSS & JavaScript

You might have noticed that we're using an `.invisible` CSS class to trigger the animation instead of animating the CSS `opacity` property directly like we did for `top`. This is because for `top`, we needed to animate the property to a specific value that depended on the instance data. 

On the other hand, here we only want to show and hide an element independently of its data. Since it's a good idea to keep your CSS out of your JavaScript as much as possible, we'll only add and remove the class here, and specify the details of the animation over in our stylesheet. 

<% end %>

We should finally have the animation behavior we wanted. Load up your app and give it a try! And you can also play around with the `.post.animated` classes to see if you can come up with other transitions. Hint: [CSS easing functions](http://matthewlein.com/ceaser/) are a good place to start!